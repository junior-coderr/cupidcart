<%- include('../partials/header') %>

<div class="admin-dashboard-container py-5">
  <br>
  <br>
    <div class="container">
        <div class="row">
            <!-- Sidebar -->
            <div class="col-lg-3 mb-4">
                <div class="card sidebar-card">
                    <div class="card-body">
                        <h5 class="sidebar-title mb-4">Admin Panel</h5>
                        <div class="nav flex-column nav-pills">
                            <button class="nav-link active" onclick="showTab('overview')">
                                <i class="fas fa-chart-line"></i> Overview
                            </button>
                            <button class="nav-link" onclick="showTab('orders')">
                                <i class="fas fa-shopping-cart"></i> Orders
                            </button>
                            <button class="nav-link" onclick="showTab('users')">
                                <i class="fas fa-users"></i> Users
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Main Content -->
            <div class="col-lg-9">
                <!-- Overview Tab -->
                <div id="overview" class="tab-content active">
                    <div class="row">
                        <!-- Statistics Cards -->
                        <div class="col-md-4 mb-4">
                            <div class="card stat-card">
                                <div class="card-body">
                                    <div class="stat-icon">
                                        <i class="fas fa-shopping-bag"></i>
                                    </div>
                                    <h3 class="stat-number" id="totalOrders">0</h3>
                                    <p class="stat-label">Total Orders</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 mb-4">
                            <div class="card stat-card">
                                <div class="card-body">
                                    <div class="stat-icon">
                                        <i class="fas fa-users"></i>
                                    </div>
                                    <h3 class="stat-number" id="totalUsers">0</h3>
                                    <p class="stat-label">Total Users</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4 mb-4">
                            <div class="card stat-card">
                                <div class="card-body">
                                    <div class="stat-icon">
                                        <i class="fas fa-dollar-sign"></i>
                                    </div>
                                    <h3 class="stat-number" id="totalRevenue">$0</h3>
                                    <p class="stat-label">Total Revenue</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Recent Orders -->
                    <div class="card mb-4">
                        <div class="card-body">
                            <h5 class="card-title">Recent Orders</h5>
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Order ID</th>
                                            <th>Customer</th>
                                            <th>Status</th>
                                            <th>Amount</th>
                                            <th>Date</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody id="recentOrdersTable">
                                        <!-- Will be populated by JavaScript -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Orders Tab -->
                <div id="orders" class="tab-content">
                    <div class="card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <h5 class="card-title">All Orders</h5>
                                <div class="order-filters">
                                    <select class="form-select" id="statusFilter">
                                        <option value="">All Status</option>
                                        <option value="processing">Processing</option>
                                        <option value="confirmed">Confirmed</option>
                                        <option value="delivered">Delivered</option>
                                        <option value="cancelled">Cancelled</option>
                                    </select>
                                </div>
                            </div>
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Order ID</th>
                                            <th>Customer</th>
                                            <th>Status</th>
                                            <th>Amount</th>
                                            <th>Date</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody id="allOrdersTable">
                                        <!-- Will be populated by JavaScript -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Users Tab -->
                <div id="users" class="tab-content">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">User Management</h5>
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>User ID</th>
                                            <th>Name</th>
                                            <th>Email</th>
                                            <th>Phone</th>
                                            <th>Orders</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody id="usersTable">
                                        <!-- Will be populated by JavaScript -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="drawer" id="orderDrawer">
        <div class="drawer-content">
            <div class="drawer-header">
                <h4 class="mb-0">Order Details</h4>
                <button type="button" class="btn-close" onclick="closeDrawer()"></button>
            </div>
            <div class="drawer-body">
                <div class="customer-details mb-4">
                    <h5>Customer Information</h5>
                    <div class="info-row">
                        <span class="label">Name:</span>
                        <span id="drawerCustomerName"></span>
                    </div>
                    <div class="info-row">
                        <span class="label">Email:</span>
                        <span id="drawerCustomerEmail"></span>
                    </div>
                    <div class="info-row">
                        <span class="label">Phone:</span>
                        <span id="drawerCustomerPhone"></span>
                    </div>
                </div>
                
                <div class="shipping-details mb-4">
                    <h5>Shipping Details</h5>
                    <div class="info-row">
                        <span class="label">Address:</span>
                        <span id="drawerAddress"></span>
                    </div>
                    <div class="info-row">
                        <span class="label">City:</span>
                        <span id="drawerCity"></span>
                    </div>
                    <div class="info-row">
                        <span class="label">Pincode:</span>
                        <span id="drawerPincode"></span>
                    </div>
                </div>
                
                <div class="order-items mb-4">
                    <h5>Order Items</h5>
                    <div id="drawerOrderItems"></div>
                </div>
                
                <div class="order-summary">
                    <h5>Order Summary</h5>
                    <div class="info-row">
                        <span class="label">Order Status:</span>
                        <span id="drawerOrderStatus"></span>
                    </div>
                    <div class="info-row">
                        <span class="label">Payment Method:</span>
                        <span id="drawerPaymentMethod"></span>
                    </div>
                    <div class="info-row">
                        <span class="label">Total Amount:</span>
                        <span id="drawerTotalAmount"></span>
                    </div>
                    <div class="info-row">
                        <span class="label">Order Date:</span>
                        <span id="drawerOrderDate"></span>
                    </div>
                </div>
            </div>
            <div class="drawer-footer">
                <button class="btn btn-secondary" onclick="closeDrawer()">Close</button>
                <button class="btn btn-primary" onclick="goToOrderDetails()">View Full Details</button>
            </div>
        </div>
    </div>

    <!-- Status Update Modal -->
    <div class="modal fade" id="updateStatusModal" tabindex="-1" aria-labelledby="updateStatusModalLabel" aria-hidden="false">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="updateStatusModalLabel">Update Order Status</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="statusSelect" class="form-label">Select New Status</label>
                        <select class="form-select" id="statusSelect">
                            <option value="Processing">Processing</option>
                            <option value="Confirmed">Confirmed</option>
                            <option value="Delivered">Delivered</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="statusNotes" class="form-label">Notes (optional)</label>
                        <textarea class="form-control" id="statusNotes" rows="3" placeholder="Enter any notes about this status change..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveStatusBtn">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.admin-dashboard-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    padding-top: 100px;
}

/* Add this to ensure navbar is not transparent */
.navbar {
    background-color: white !important;
    box-shadow: 0 2px 15px rgba(0,0,0,0.1) !important;
}

.navbar-brand, 
.nav-link {
    color: #2c3e50 !important;
}

.sidebar-card {
    position: sticky;
    top: 100px;
    border-radius: 15px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.05);
    background: white;
}

.sidebar-title {
    color: #2c3e50;
    font-weight: 600;
    padding-bottom: 1rem;
    border-bottom: 1px solid rgba(0,0,0,0.1);
}

.nav-pills .nav-link {
    color: #2c3e50;
    padding: 0.8rem 1rem;
    margin: 0.3rem 0;
    border-radius: 10px;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 10px;
    cursor: pointer;
}

.nav-pills .nav-link i {
    width: 20px;
}

.nav-pills .nav-link:hover {
    background: rgba(255, 75, 110, 0.1);
    color: #ff4b6e;
}

.nav-pills .nav-link.active {
    background: linear-gradient(45deg, #ff4b6e, #ff758c);
    color: white !important;
}

.stat-card {
    border: none;
    border-radius: 15px;
    transition: all 0.3s ease;
    background: white;
    box-shadow: 0 4px 15px rgba(0,0,0,0.05);
    overflow: hidden;
}

.stat-card:hover {
    transform: none;
    box-shadow: 0 4px 15px rgba(0,0,0,0.05);
}

.stat-icon {
    font-size: 2rem;
    color: #ff4b6e;
    margin-bottom: 1rem;
}

.stat-number {
    font-size: 2rem;
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 0.5rem;
}

.stat-label {
    color: #6c757d;
    font-size: 0.9rem;
    margin: 0;
}

.table {
    color: #2c3e50;
}

.table th {
    border-top: none;
    color: #2c3e50;
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.8rem;
    background-color: #f8f9fa;
}

.table td {
    vertical-align: middle;
    color: #2c3e50;
}

.table tr:hover {
    background-color: #f8f9fa;
}

.badge {
    padding: 0.5rem 1rem;
    border-radius: 50px;
    font-weight: 500;
    color: white;
}

.btn-group {
    gap: 0.5rem;
}

.btn-outline-primary, 
.btn-outline-success {
    border-radius: 8px;
    padding: 0.4rem 0.8rem;
    transition: all 0.3s ease;
    color: #2c3e50;
}

.btn-outline-primary:hover, 
.btn-outline-success:hover {
    color: white;
}

.form-control {
    color: #2c3e50;
}

.form-control:focus {
    color: #2c3e50;
}

.form-select {
    color: #2c3e50;
}

/* Add these new styles for better visibility */
.bg-warning {
    background-color: #ffc107 !important;
    color: #000 !important;
}

.bg-info {
    background-color: #0dcaf0 !important;
    color: #fff !important;
}

.bg-success {
    background-color: #198754 !important;
    color: #fff !important;
}

.bg-danger {
    background-color: #dc3545 !important;
    color: #fff !important;
}

.card-title {
    color: #2c3e50;
    font-weight: 600;
}

/* Remove hover effects */
.card:hover {
    transform: none;
    box-shadow: 0 4px 15px rgba(0,0,0,0.05);
}

.btn:hover {
    transform: none;
}

.table tr:hover {
    background-color: #f8f9fa;
}

@media (max-width: 991.98px) {
    .admin-dashboard-container {
        padding-top: 80px;
        padding-left: 10px;
        padding-right: 10px;
    }

    .sidebar-card {
        position: static;
        margin-bottom: 1rem;
        border-radius: 10px;
    }
    
    .nav-pills {
        display: flex;
        overflow-x: auto;
        padding-bottom: 0.5rem;
        margin: 0 -0.5rem;
        -webkit-overflow-scrolling: touch;
    }
    
    .nav-pills .nav-link {
        padding: 0.6rem 1rem;
        margin: 0 0.25rem;
        font-size: 0.9rem;
        min-width: auto;
        white-space: nowrap;
    }

    .nav-pills .nav-link i {
        font-size: 0.9rem;
    }

    .card {
        margin-bottom: 1rem;
        border-radius: 10px;
    }

    .card-body {
        padding: 1rem;
    }

    .card-title {
        font-size: 1.1rem;
        margin-bottom: 1rem;
    }
}

@media (max-width: 767.98px) {
    .stat-card {
        margin-bottom: 1rem;
    }
    
    .stat-card .card-body {
        padding: 1rem;
        text-align: center;
    }

    .stat-icon {
        font-size: 1.5rem;
        margin-bottom: 0.5rem;
    }

    .stat-number {
        font-size: 1.5rem;
        margin-bottom: 0.25rem;
    }

    .stat-label {
        font-size: 0.8rem;
    }
    
    .table-responsive {
        margin: 0 -1rem;
        border-radius: 0;
    }
    
    .table {
        font-size: 0.85rem;
    }

    .table th {
        font-size: 0.75rem;
        padding: 0.5rem;
    }

    .table td {
        padding: 0.5rem;
    }

    /* Adjust badge size for mobile */
    .badge {
        padding: 0.35rem 0.6rem;
        font-size: 0.75rem;
    }

    /* Make buttons smaller on mobile */
    .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }

    .btn-group {
        gap: 0.25rem;
    }

    /* Adjust form elements for mobile */
    .form-select, .form-control {
        font-size: 0.9rem;
        padding: 0.4rem 0.75rem;
    }

    .form-label {
        font-size: 0.9rem;
        margin-bottom: 0.25rem;
    }

    /* Hide less important columns on mobile */
    .table th:nth-child(1), 
    .table td:nth-child(1),
    .table th:nth-child(5), 
    .table td:nth-child(5) {
        display: none;
    }

    /* Make action buttons stack on mobile */
    .btn-group {
        display: flex;
        flex-direction: column;
    }

    .btn-group .btn {
        width: 100%;
        margin: 0.1rem 0;
    }
}

/* Add styles for extra small devices */
@media (max-width: 575.98px) {
    .admin-dashboard-container {
        padding-top: 70px;
        padding-left: 5px;
        padding-right: 5px;
    }

    .container {
        padding-left: 10px;
        padding-right: 10px;
    }

    .card-body {
        padding: 0.75rem;
    }

    /* Further reduce text sizes */
    .stat-number {
        font-size: 1.25rem;
    }

    .stat-label {
        font-size: 0.75rem;
    }

    /* Adjust table for very small screens */
    .table {
        font-size: 0.8rem;
    }

    .table td, 
    .table th {
        padding: 0.4rem;
    }

    /* Stack filter dropdowns */
    .order-filters {
        width: 100%;
        margin-top: 0.5rem;
    }

    .form-select {
        width: 100%;
    }

    /* Make buttons more touch-friendly */
    .btn {
        min-height: 38px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
}

/* Add smooth scrolling for mobile */
.nav-pills {
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE and Edge */
}

.nav-pills::-webkit-scrollbar {
    display: none; /* Chrome, Safari, Opera */
}

/* Add active tab indicator */
.nav-pills .nav-link.active::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 100%;
    height: 2px;
    background: #ff4b6e;
}

/* Add loading skeleton styles */
@keyframes shimmer {
    0% { background-position: -1000px 0; }
    100% { background-position: 1000px 0; }
}

.skeleton {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 1000px 100%;
    animation: shimmer 2s infinite;
    border-radius: 4px;
}

.skeleton-text {
    height: 1em;
    margin-bottom: 0.5rem;
}

.skeleton-button {
    height: 2em;
    width: 80px;
}

/* Add these styles to remove red underlines and improve button appearance */
.nav-link {
    text-decoration: none !important;
    border: none !important;
    outline: none !important;
}

.nav-link:focus {
    box-shadow: none !important;
}

button {
    text-decoration: none !important;
    outline: none !important;
}

button:focus {
    outline: none !important;
    box-shadow: none !important;
}

.btn:focus {
    box-shadow: none !important;
}

/* Remove any webkit appearance that might cause underlines */
input, button, select, textarea {
    -webkit-appearance: none !important;
    appearance: none !important;
}

/* Remove settings tab content */
#settings {
    display: none !important;
}

/* Add these styles to the main style section */
.admin-dashboard-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    padding-top: 100px;
}

/* Remove all red underlines and unwanted outlines */
* {
    text-decoration: none !important;
    outline: none !important;
}

/* Remove underlines from all buttons and links */
a, button, .btn, .nav-link {
    text-decoration: none !important;
    outline: none !important;
    box-shadow: none !important;
}

/* Remove focus outlines */
*:focus {
    outline: none !important;
    box-shadow: none !important;
}

/* Remove webkit appearance and default styling */
button, input, select, .form-select, .form-control {
    -webkit-appearance: none !important;
    -moz-appearance: none !important;
    appearance: none !important;
    outline: none !important;
    box-shadow: none !important;
}

/* Fix for select dropdowns */
.form-select {
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e") !important;
    background-repeat: no-repeat !important;
    background-position: right 0.75rem center !important;
    background-size: 16px 12px !important;
}

/* Remove button focus styles */
.btn:focus, .btn:active, .btn-primary:focus, .btn-success:focus {
    outline: none !important;
    box-shadow: none !important;
}

/* Remove nav-link focus and active states outlines */
.nav-pills .nav-link:focus,
.nav-pills .nav-link:active,
.nav-pills .nav-link.active {
    outline: none !important;
    box-shadow: none !important;
}

/* Remove table hover outlines */
.table tr:hover td {
    outline: none !important;
}

/* Remove badge outlines */
.badge {
    outline: none !important;
    text-decoration: none !important;
}

/* Fix for mobile devices */
@media (max-width: 767.98px) {
    .btn, .nav-link, .form-select, .form-control {
        -webkit-tap-highlight-color: transparent !important;
    }
}

.drawer {
    position: fixed;
    top: 0;
    right: -100%;
    width: 100%;
    max-width: 500px;
    height: 100vh;
    background: white;
    box-shadow: -5px 0 15px rgba(0,0,0,0.1);
    transition: right 0.3s ease;
    z-index: 1050;
    overflow-y: auto;
}

.drawer.active {
    right: 0;
}

.drawer-content {
    display: flex;
    flex-direction: column;
    height: 100%;
}

.drawer-header {
    padding: 1.5rem;
    border-bottom: 1px solid #dee2e6;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: white;
    position: sticky;
    top: 0;
    z-index: 1;
}

.drawer-body {
    padding: 1.5rem;
    flex-grow: 1;
    overflow-y: auto;
}

.drawer-footer {
    padding: 1rem 1.5rem;
    border-top: 1px solid #dee2e6;
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    background: white;
    position: sticky;
    bottom: 0;
}

.info-row {
    display: flex;
    margin-bottom: 0.5rem;
    padding: 0.5rem;
    border-radius: 8px;
    background: #f8f9fa;
}

.info-row .label {
    font-weight: 500;
    min-width: 120px;
    color: #6c757d;
}

.drawer h5 {
    color: #2c3e50;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid #ff4b6e;
    display: inline-block;
}

.order-item {
    display: flex;
    gap: 1rem;
    padding: 1rem;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    margin-bottom: 1rem;
}

.order-item-image {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 8px;
}

.order-item-details {
    flex-grow: 1;
}

.order-item-title {
    font-weight: 500;
    margin-bottom: 0.25rem;
}

.order-item-price {
    color: #6c757d;
}

@media (max-width: 576px) {
    .drawer {
        max-width: 100%;
    }
    
    .drawer-header {
        padding: 1rem;
    }
    
    .drawer-body {
        padding: 1rem;
    }
    
    .drawer-footer {
        padding: 1rem;
    }
    
    .info-row {
        flex-direction: column;
    }
    
    .info-row .label {
        min-width: auto;
        margin-bottom: 0.25rem;
    }
}

/* Add these new styles for the modal */
.modal-content {
    border-radius: 15px;
    border: none;
    box-shadow: 0 0 20px rgba(0,0,0,0.1);
}

.modal-header {
    border-bottom: 2px solid #f8f9fa;
    padding: 1.5rem;
}

.modal-footer {
    border-top: 2px solid #f8f9fa;
    padding: 1.5rem;
}

#statusSelect {
    border-radius: 8px;
    padding: 0.8rem;
    border: 2px solid #e9ecef;
    transition: all 0.3s ease;
}

#statusSelect:focus {
    border-color: #ff4b6e;
    box-shadow: none;
}

#statusNotes {
    border-radius: 8px;
    padding: 0.8rem;
    border: 2px solid #e9ecef;
    transition: all 0.3s ease;
    resize: vertical;
}

#statusNotes:focus {
    border-color: #ff4b6e;
    box-shadow: none;
}

.modal .btn {
    padding: 0.8rem 1.5rem;
    border-radius: 8px;
}

.modal .btn-primary {
    background: linear-gradient(45deg, #ff4b6e, #ff758c);
    border: none;
}

.modal .btn-primary:hover {
    background: linear-gradient(45deg, #ff758c, #ff4b6e);
}
</style>

<!-- Add a loading overlay -->
<div id="loadingOverlay" class="loading-overlay d-none">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

<style>
/* Add loading overlay styles */
.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(255, 255, 255, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

.d-none {
    display: none !important;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Get token from localStorage or cookies
    const token = localStorage.getItem('token') || getCookie('token');
    
    if (!token) {
        showToast('Please login to access admin dashboard', 'error');
        setTimeout(() => {
            window.location.href = '/login';
        }, 2000);
        return;
    }

    // Helper function to get cookie value
    function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
    }

    // Helper function to handle unauthorized responses
    function handleUnauthorized(response) {
        if (response.status === 401 || response.status === 403) {
            localStorage.removeItem('token');
            document.cookie = 'token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
            showToast('Session expired or unauthorized. Please login again.', 'error');
            setTimeout(() => {
                window.location.href = '/login';
            }, 2000);
            return true;
        }
        return false;
    }

    // Initial load
    loadDashboardStats();
    loadRecentOrders();
    loadAllOrders();
    loadUsers();

    // Tab switching functionality
    function showTab(tabId) {
        // Hide all tab contents
        document.querySelectorAll('.tab-content').forEach(tab => {
            tab.style.display = 'none';
        });
        
        // Show selected tab
        document.getElementById(tabId).style.display = 'block';
        
        // Update active state of nav links
        document.querySelectorAll('.nav-link').forEach(link => {
            link.classList.remove('active');
        });
        document.querySelector(`[onclick="showTab('${tabId}')"]`).classList.add('active');
    }
    window.showTab = showTab;

    // Function to load dashboard statistics
    async function loadDashboardStats() {
        try {
            const response = await fetch('/admin/stats', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (handleUnauthorized(response)) return;
            if (!response.ok) throw new Error('Failed to fetch dashboard stats');

            const data = await response.json();
            document.getElementById('totalOrders').textContent = data.totalOrders;
            document.getElementById('totalUsers').textContent = data.totalUsers;
            document.getElementById('totalRevenue').textContent = `₹${data.totalRevenue.toFixed(2)}`;
        } catch (error) {
            console.error('Error loading dashboard stats:', error);
            showToast('Error loading dashboard statistics', 'error');
        }
    }

    // Function to load recent orders
    async function loadRecentOrders() {
        try {
            const response = await fetch('/admin/orders?limit=5', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (handleUnauthorized(response)) return;
            if (!response.ok) throw new Error('Failed to fetch recent orders');

            const orders = await response.json();
            const recentOrdersTable = document.getElementById('recentOrdersTable');
            recentOrdersTable.innerHTML = orders.map(order => `
                <tr>
                    <td>${order._id}</td>
                    <td>${order.user.firstname} ${order.user.lastname}</td>
                    <td><span class="badge ${getStatusClass(order.orderStatus)}">${order.orderStatus}</span></td>
                    <td>₹${order.totalPrice.toFixed(2)}</td>
                    <td>${new Date(order.createdAt).toLocaleDateString()}</td>
                    <td>
                        <button class="btn btn-sm btn-primary" onclick="viewOrder('${order._id}')">View</button>
                    </td>
                </tr>
            `).join('');
        } catch (error) {
            console.error('Error loading recent orders:', error);
            showToast('Error loading recent orders', 'error');
        }
    }

    // Function to load all orders
    async function loadAllOrders() {
        try {
            const response = await fetch('/admin/orders', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (handleUnauthorized(response)) return;
            if (!response.ok) throw new Error('Failed to fetch orders');

            const orders = await response.json();
            const allOrdersTable = document.getElementById('allOrdersTable');
            allOrdersTable.innerHTML = orders.map(order => `
                <tr>
                    <td>${order._id}</td>
                    <td>${order.user.firstname} ${order.user.lastname}</td>
                    <td><span class="badge ${getStatusClass(order.orderStatus)}">${order.orderStatus}</span></td>
                    <td>₹${order.totalPrice.toFixed(2)}</td>
                    <td>${new Date(order.createdAt).toLocaleDateString()}</td>
                    <td>
                        <div class="btn-group">
                            <button class="btn btn-sm btn-primary" onclick="viewOrder('${order._id}')">View</button>
                            <button class="btn btn-sm btn-success" onclick="updateOrderStatus('${order._id}')">Update</button>
                        </div>
                    </td>
                </tr>
            `).join('');
        } catch (error) {
            console.error('Error loading all orders:', error);
            showToast('Error loading orders', 'error');
        }
    }

    // Function to load users
    async function loadUsers() {
        try {
            const response = await fetch('/admin/users', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            if (handleUnauthorized(response)) return;
            if (!response.ok) throw new Error('Failed to fetch users');

            const users = await response.json();
            const usersTable = document.getElementById('usersTable');
            usersTable.innerHTML = users.map(user => `
                <tr>
                    <td>${user._id}</td>
                    <td>${user.firstname} ${user.lastname}</td>
                    <td>${user.email}</td>
                    <td>${user.mobile || 'N/A'}</td>
                    <td>
                        <button class="btn btn-sm btn-primary" onclick="viewUser('${user._id}')">View</button>
                    </td>
                </tr>
            `).join('');
        } catch (error) {
            console.error('Error loading users:', error);
            showToast('Error loading users', 'error');
        }
    }

    // Helper function to get status class for badges
    function getStatusClass(status) {
        const classes = {
            'Processing': 'bg-warning',
            'Confirmed': 'bg-info',
            'Delivered': 'bg-success',
            'Cancelled': 'bg-danger'
        };
        return classes[status] || 'bg-secondary';
    }

    // Make these functions available globally
    window.viewOrder = async function(orderId) {
        try {
            const token = localStorage.getItem('token');
            // if (!token) {
            //     showToast('Please login to view order details', 'error');
            //     window.location.href = '/login';
            //     return;
            // }
          console.log('runnning')
            const response = await fetch(`/admin/orders/${orderId}`, {
                method:"GET",
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Accept': 'application/json'
                }
            });
            // return;

            if (response.status === 401) {
                localStorage.removeItem('token');
                showToast('Session expired. Please login again', 'error');
                setTimeout(() => {
                    window.location.href = '/login';
                }, 2000);
                return;
            }

            if (response.status === 403) {
                showToast('Access denied. Admin privileges required.', 'error');
                setTimeout(() => {
                    window.location.href = '/login';
                }, 2000);
                return;
            }

            if (!response.ok) {
                throw new Error('Failed to fetch order details');
            }

            const order = await response.json();
            console.log('order',order);

            // Populate drawer with order data
            document.getElementById('drawerCustomerName').textContent = `${order.user.firstname} ${order.user.lastname}`;
            document.getElementById('drawerCustomerEmail').textContent = order.user.email;
            document.getElementById('drawerCustomerPhone').textContent = order.user.mobile || 'Not provided';
            
            document.getElementById('drawerAddress').textContent = order.shippingInfo.address;
            document.getElementById('drawerCity').textContent = order.shippingInfo.city;
            document.getElementById('drawerPincode').textContent = order.shippingInfo.pincode;
            
            // Populate order items
            const orderItemsContainer = document.getElementById('drawerOrderItems');
            orderItemsContainer.innerHTML = order.orderItems.map(item => `
                <div class="order-item">
                    <img src="${item.images}" alt="${item.name}" class="order-item-image">
                    <div class="order-item-details">
                        <div class="order-item-title">${item.name}</div>
                        <div class="order-item-price">
                            ₹${item.price} × ${item.quantity}
                        </div>
                    </div>
                </div>
            `).join('');
            
            document.getElementById('drawerOrderStatus').innerHTML = `
                <span class="badge ${getStatusClass(order.orderStatus)}">${order.orderStatus}</span>
            `;
            document.getElementById('drawerPaymentMethod').textContent = order.paymentMethod || 'COD';
            document.getElementById('drawerTotalAmount').textContent = `₹${order.totalPrice.toFixed(2)}`;
            document.getElementById('drawerOrderDate').textContent = new Date(order.createdAt).toLocaleString();
            
            // Store order ID for the "View Full Details" button
            document.getElementById('orderDrawer').setAttribute('data-order-id', order._id);
            
            // Show drawer
            document.getElementById('orderDrawer').classList.add('active');

            // Add notes to the drawer
            if (order.notes && order.notes.length > 0) {
                const notesHtml = order.notes.reverse().map(note => `
                    <div class="info-row">
                        <div class="w-100">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <span class="badge ${getStatusClass(note.status)}">${note.status}</span>
                                <small class="text-muted">${new Date(note.timestamp).toLocaleString()}</small>
                            </div>
                            <div class="note-message">${note.message}</div>
                        </div>
                    </div>
                `).join('');
                
                // Add notes section to drawer
                const notesSection = document.createElement('div');
                notesSection.className = 'order-notes mb-4';
                notesSection.innerHTML = `
                    <h5>Order Notes</h5>
                    ${notesHtml}
                `;
                
                // Insert notes section before order summary
                const orderSummary = document.querySelector('.order-summary');
                orderSummary.parentNode.insertBefore(notesSection, orderSummary);
            }
            
        } catch (error) {
            console.error('Error viewing order:', error);
            showToast('Error viewing order details', 'error');
        }
    }

    window.updateOrderStatus = function(orderId) {
        const modal = new bootstrap.Modal(document.getElementById('updateStatusModal'));
        const saveBtn = document.getElementById('saveStatusBtn');
        
        saveBtn.replaceWith(saveBtn.cloneNode(true));
        const newSaveBtn = document.getElementById('saveStatusBtn');
        
        newSaveBtn.addEventListener('click', async function() {
            const newStatus = document.getElementById('statusSelect').value;
            const noteMessage = document.getElementById('statusNotes').value;
            
            if (!noteMessage.trim()) {
                showToast('Please add a note for this status change', 'warning');
                return;
            }
            
            try {
                const response = await fetch(`/admin/orders/${orderId}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        status: newStatus,
                        note: {
                            message: noteMessage
                        }
                    })
                });
                
                if (handleUnauthorized(response)) return;
                if (!response.ok) throw new Error('Failed to update order status');
                
                showToast('Order status updated successfully', 'success');
                modal.hide();
                
                // Reload current order details if in drawer
                if (document.getElementById('orderDrawer').classList.contains('active')) {
                    await viewOrder(orderId);
                }
                
                // Refresh orders lists
                loadAllOrders();
                loadRecentOrders();
                
                // Clear the form
                document.getElementById('statusNotes').value = '';
            } catch (error) {
                console.error('Error updating order status:', error);
                showToast('Error updating order status', 'error');
            }
        });
        
        modal.show();
    }

    window.viewUser = function(userId) {
        showToast('User details view coming soon!', 'info');
    }

    // Status filter functionality
    document.getElementById('statusFilter').addEventListener('change', function(e) {
        const status = e.target.value;
        loadAllOrders(status);
    });
});

window.closeDrawer = function() {
    document.getElementById('orderDrawer').classList.remove('active');
}

window.goToOrderDetails = function() {
    const orderId = document.getElementById('orderDrawer').getAttribute('data-order-id');
    window.location.href = `/admin/order-detail?id=${orderId}`;
}

// Close drawer when clicking outside
document.addEventListener('click', function(event) {
    const drawer = document.getElementById('orderDrawer');
    const drawerContent = drawer.querySelector('.drawer-content');
    
    if (drawer.classList.contains('active') && 
        !drawerContent.contains(event.target) && 
        !event.target.closest('.btn-primary')) {
        closeDrawer();
    }
});
</script>

<style>
/* Add these styles */
.note-message {
    margin-top: 0.5rem;
    white-space: pre-wrap;
}

.order-notes .info-row {
    border-left: 4px solid #ff4b6e;
}
</style>

<%- include('../partials/footer') %>