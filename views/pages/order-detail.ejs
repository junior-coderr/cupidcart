<%- include('../partials/header') %>

<div class="order-detail-container py-5">
  <br>
  <br>
    <div class="container">
        <nav aria-label="breadcrumb" class="mb-4">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/orders">My Orders</a></li>
                <li class="breadcrumb-item active" aria-current="page">Order Details</li>
            </ol>
        </nav>
        
        <div class="order-detail-content">
            <div class="row">
                <div class="col-lg-8">
                    <!-- Order Status Timeline -->
                    <div class="card mb-4">
                        <div class="card-body">
                            <h4 class="card-title d-flex justify-content-between align-items-center mb-4">
                                <span>Order Status</span>
                                <span class="badge" id="orderStatusBadge"></span>
                            </h4>
                            <div class="order-timeline" id="orderTimeline">
                                <!-- Timeline will be populated by JavaScript -->
                            </div>
                        </div>
                    </div>

                    <!-- Order Notes -->
                    <div class="card mb-4">
                        <div class="card-body">
                            <h4 class="card-title mb-4">Order Notes</h4>
                            <div class="order-notes" id="orderNotes">
                                <!-- Notes will be populated by JavaScript -->
                            </div>
                        </div>
                    </div>

                    <!-- Order Items -->
                    <div class="card mb-4">
                        <div class="card-body">
                            <h4 class="card-title mb-4">Order Items</h4>
                            <div id="orderItems">
                                <!-- Order items will be populated by JavaScript -->
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-lg-4">
                    <!-- Order Summary -->
                    <div class="card mb-4">
                        <div class="card-body">
                            <h4 class="card-title mb-4">Order Summary</h4>
                            <div class="summary-item d-flex justify-content-between mb-2">
                                <span>Order ID</span>
                                <span id="orderId" class="text-muted"></span>
                            </div>
                            <div class="summary-item d-flex justify-content-between mb-2">
                                <span>Order Date</span>
                                <span id="orderDate" class="text-muted"></span>
                            </div>
                            <div class="summary-item d-flex justify-content-between mb-2">
                                <span>Payment Method</span>
                                <span id="paymentMethod" class="text-muted"></span>
                            </div>
                            <hr>
                            <div class="summary-item d-flex justify-content-between mb-2">
                                <span>Subtotal</span>
                                <span id="subtotal" class="text-muted"></span>
                            </div>
                            <div class="summary-item d-flex justify-content-between mb-2">
                                <span>Shipping</span>
                                <span class="text-success">Free</span>
                            </div>
                            <div class="summary-item d-flex justify-content-between fw-bold mt-3">
                                <span>Total</span>
                                <span id="totalPrice"></span>
                            </div>
                            <div id="cancelOrderSection" class="mt-4 d-none">
                                <button onclick="cancelOrder()" class="btn btn-danger w-100">
                                    <i class="fas fa-times-circle"></i> Cancel Order
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Shipping Details -->
                    <div class="card">
                        <div class="card-body">
                            <h4 class="card-title mb-4">Shipping Details</h4>
                            <div class="shipping-info">
                                <p class="mb-2">
                                    <i class="fas fa-phone-alt text-primary"></i>
                                    <span id="phone" class="ms-2"></span>
                                </p>
                                <p class="mb-2">
                                    <i class="fas fa-map-marker-alt text-primary"></i>
                                    <span id="address" class="ms-2"></span>
                                </p>
                                <p class="mb-2">
                                    <i class="fas fa-city text-primary"></i>
                                    <span id="city" class="ms-2"></span>
                                </p>
                                <p class="mb-0">
                                    <i class="fas fa-map-pin text-primary"></i>
                                    <span id="pincode" class="ms-2"></span>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add this modal HTML before the script tag -->
<div class="modal fade" id="cancelOrderModal" tabindex="-1" aria-labelledby="cancelOrderModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="cancelOrderModalLabel">Cancel Order</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center py-4">
                <i class="fas fa-exclamation-circle text-warning mb-3" style="font-size: 3rem;"></i>
                <h5 class="mb-3">Are you sure you want to cancel this order?</h5>
                <p class="text-muted mb-0">This action cannot be undone.</p>
            </div>
            <div class="modal-footer border-0">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> No, Keep Order
                </button>
                <button type="button" class="btn btn-danger" onclick="confirmCancelOrder()">
                    <i class="fas fa-check"></i> Yes, Cancel Order
                </button>
            </div>
        </div>
    </div>
</div>

<style>
.order-detail-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    padding-top: 80px;
    transition: all 0.3s ease;
}

/* Add styles to fix header transparency */
body {
    background: #f8f9fa;
}

.navbar {
    background: white !important;
    box-shadow: 0 2px 15px rgba(0,0,0,0.08) !important;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    transition: all 0.3s ease;
}

.navbar-brand, 
.nav-link {
    color: #2c3e50 !important;
    transition: color 0.3s ease;
}

.nav-link:hover {
    color: #ff4b6e !important;
    transform: translateY(-1px);
}

.navbar .active {
    color: #ff4b6e !important;
}

.card {
    border: none;
    box-shadow: 0 4px 20px rgba(0,0,0,0.05);
    border-radius: 20px;
    transition: all 0.3s ease;
}

.card:hover {
    transform: none;
    box-shadow: 0 4px 20px rgba(0,0,0,0.05);
}

.card-title {
    color: #2c3e50;
    font-weight: 600;
    font-size: 1.25rem;
    margin-bottom: 1.5rem;
}

.badge {
    padding: 8px 16px;
    border-radius: 12px;
    font-weight: 600;
    font-size: 0.9rem;
    letter-spacing: 0.5px;
    transition: all 0.3s ease;
}

.bg-warning {
    background: linear-gradient(45deg, #ffc107, #ffb300) !important;
    color: #000 !important;
}

.bg-info {
    background: linear-gradient(45deg, #0dcaf0, #0099cc) !important;
    color: #fff !important;
}

.bg-success {
    background: linear-gradient(45deg, #198754, #28a745) !important;
    color: #fff !important;
}

.bg-danger {
    background: linear-gradient(45deg, #dc3545, #c82333) !important;
    color: #fff !important;
}

.order-timeline {
    position: relative;
    padding-left: 30px;
    margin: 20px 0;
}

.timeline-item {
    position: relative;
    padding-bottom: 35px;
    transition: all 0.3s ease;
}

.timeline-item:hover {
    transform: none;
}

.timeline-item:last-child {
    padding-bottom: 0;
}

.timeline-item::before {
    content: '';
    position: absolute;
    left: -30px;
    top: 0;
    width: 22px;
    height: 22px;
    border-radius: 50%;
    background: #fff;
    border: 2.5px solid;
    transition: all 0.3s ease;
}

.timeline-item::after {
    content: '';
    position: absolute;
    left: -21px;
    top: 22px;
    width: 3px;
    height: calc(100% - 22px);
    transition: all 0.3s ease;
}

.timeline-item.completed::before {
    background: #28a745;
    border-color: #28a745;
    box-shadow: 0 0 10px rgba(40, 167, 69, 0.3);
}

.timeline-item.completed::after {
    background: #28a745;
}

.timeline-item.active::before {
    border-color: #007bff;
    background: #fff;
    box-shadow: 0 0 10px rgba(0, 123, 255, 0.3);
}

.timeline-content {
    padding-left: 20px;
    transition: all 0.3s ease;
}

.timeline-title {
    font-weight: 600;
    margin-bottom: 8px;
    color: #2c3e50;
    font-size: 1.1rem;
}

.timeline-date {
    font-size: 0.9rem;
    color: #6c757d;
    font-weight: 500;
}

.order-item {
    display: flex;
    align-items: center;
    padding: 20px 0;
    border-bottom: 1px solid rgba(0,0,0,0.08);
    transition: all 0.3s ease;
}

.order-item:hover {
    transform: none;
    background: transparent;
}

.order-item:last-child {
    border-bottom: none;
}

.order-item-image {
    width: 90px;
    height: 90px;
    object-fit: cover;
    border-radius: 15px;
    margin-right: 25px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
}

.order-item-image:hover {
    transform: none;
}

.order-item-details h5 {
    margin-bottom: 8px;
    font-weight: 600;
    color: #2c3e50;
    font-size: 1.1rem;
}

.shipping-info p {
    color: #6c757d;
    padding: 10px 0;
    margin: 0;
    transition: all 0.3s ease;
}

.shipping-info p:hover {
    transform: none;
    color: #6c757d;
}

.shipping-info i {
    width: 25px;
    color: #ff4b6e;
    transition: all 0.3s ease;
}

.breadcrumb {
    background: transparent;
    padding: 0;
    margin-bottom: 2rem;
}

.breadcrumb-item a {
    color: #ff4b6e;
    text-decoration: none;
    font-weight: 500;
    transition: all 0.3s ease;
}

.breadcrumb-item a:hover {
    transform: none;
}

.summary-item {
    padding: 10px 0;
    transition: all 0.3s ease;
}

.summary-item:hover {
    transform: none;
}

.btn-danger {
    background: linear-gradient(45deg, #dc3545, #ff4b6e);
    border: none;
    padding: 1rem;
    border-radius: 15px;
    font-weight: 600;
    letter-spacing: 0.5px;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
}

.btn-danger:hover {
    transform: none;
    box-shadow: 0 4px 15px rgba(220, 53, 69, 0.4);
    background: linear-gradient(45deg, #dc3545, #ff4b6e);
}

.btn-danger:active {
    transform: translateY(-1px);
    box-shadow: 0 4px 15px rgba(220, 53, 69, 0.4);
}

.btn-danger i {
    margin-right: 8px;
    transition: transform 0.3s ease;
}

.btn-danger:hover i {
    transform: rotate(180deg);
}

@media (max-width: 991px) {
    .order-detail-container {
        padding: 60px 15px;
    }
    
    .card {
        margin-bottom: 25px;
    }

    .order-item {
        padding: 15px 0;
    }

    .order-item-image {
        width: 70px;
        height: 70px;
        margin-right: 15px;
    }

    .order-detail-content {
        display: flex;
        flex-direction: column;
    }

    .order-detail-content .row {
        display: flex;
        flex-direction: column;
    }

    .order-detail-content .col-lg-8 {
        order: 1;
    }

    .order-detail-content .col-lg-4 {
        order: 2;
    }

    .order-detail-content .col-lg-4 .card:last-child {
        order: 3;
        margin-top: 1rem;
    }
}

@media (max-width: 576px) {
    .card-title {
        font-size: 1.1rem;
    }

    .badge {
        padding: 6px 12px;
        font-size: 0.8rem;
    }

    .timeline-title {
        font-size: 1rem;
    }

    .timeline-date {
        font-size: 0.8rem;
    }

    .order-item-details h5 {
        font-size: 1rem;
    }

    .btn-danger {
        padding: 0.8rem;
        font-size: 0.9rem;
    }
}

/* Add smooth scrolling to the whole page */
html {
    scroll-behavior: smooth;
}

/* Add these new styles */
.modal-content {
    border: none;
    border-radius: 20px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

.modal-header .btn-close {
    background: none;
    opacity: 1;
    position: relative;
    padding: 0;
}

.modal-header .btn-close::before,
.modal-header .btn-close::after {
    content: '';
    position: absolute;
    width: 2px;
    height: 16px;
    background: #1a1a1a;
    border-radius: 1px;
    top: 50%;
    left: 50%;
}

.modal-header .btn-close::before {
    transform: translate(-50%, -50%) rotate(45deg);
}

.modal-header .btn-close::after {
    transform: translate(-50%, -50%) rotate(-45deg);
}

.modal-footer .btn {
    padding: 0.8rem 1.5rem;
    border-radius: 12px;
    font-weight: 500;
    transition: all 0.3s ease;
}

.modal-footer .btn i {
    margin-right: 8px;
}

.modal-footer .btn-secondary {
    background: #f8f9fa;
    border: none;
    color: #1a1a1a;
}

.modal-footer .btn-secondary:hover {
    background: #e9ecef;
    transform: translateY(-2px);
}

.modal-footer .btn-danger {
    background: linear-gradient(45deg, #dc3545, #ff4b6e);
}

.modal-footer .btn-danger:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(220, 53, 69, 0.3);
}

/* Update timeline styles */
.timeline-item::before {
    content: '';
    position: absolute;
    left: -30px;
    top: 0;
    width: 22px;
    height: 22px;
    border-radius: 50%;
    background: #fff;
    border: 2.5px solid #e9ecef;
    transition: all 0.3s ease;
    z-index: 1;
}

.timeline-item::after {
    content: '';
    position: absolute;
    left: -21px;
    top: 22px;
    width: 3px;
    height: calc(100% - 22px);
    background: #e9ecef;
    transition: all 0.3s ease;
}

/* Completed state */
.timeline-item.completed::before {
    background: #28a745;
    border-color: #28a745;
    box-shadow: 0 0 10px rgba(40, 167, 69, 0.3);
}

.timeline-item.completed::after {
    background: #28a745;
}

/* Current/Active state */
.timeline-item.active::before {
    background: #ffc107;
    border-color: #ffc107;
    box-shadow: 0 0 10px rgba(255, 193, 7, 0.3);
}

.timeline-item.active::after {
    background: #e9ecef;
}

/* Pending state */
.timeline-item.pending::before {
    background: #fff;
    border-color: #e9ecef;
}

.timeline-item.pending::after {
    background: #e9ecef;
}

/* Status-specific colors */
.timeline-item.processing.active::before {
    background: #ffc107;
    border-color: #ffc107;
}

.timeline-item.confirmed.active::before {
    background: #17a2b8;
    border-color: #17a2b8;
}

.timeline-item.delivered.active::before {
    background: #28a745;
    border-color: #28a745;
}

.timeline-item.cancelled::before {
    background: #dc3545;
    border-color: #dc3545;
    box-shadow: 0 0 10px rgba(220, 53, 69, 0.3);
}

/* Add these styles */
.note-item {
    transition: all 0.3s ease;
    border-left: 4px solid #ff4b6e;
    background: #fff !important; /* Change from bg-light to white */
    box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}

.note-item:hover {
    transform: none;
    background: #fff !important;
    box-shadow: 0 4px 12px rgba(0,0,0,0.08);
}

.note-item .badge {
    font-size: 0.8rem;
    padding: 0.4rem 0.8rem;
}

.note-item p {
    color: #2c3e50; /* Darker text color for better readability */
    margin-bottom: 0;
    font-size: 0.95rem;
    line-height: 1.5;
}

.note-item .text-muted {
    color: #6c757d !important; /* Ensure timestamp is visible */
}

/* Add these new styles for the notes section */
.order-notes {
    background: #fff;
    border-radius: 20px;
    overflow: hidden;
}

.order-notes .note-item {
    margin: 0.5rem 0;
    padding: 1rem;
    border-radius: 12px;
}

.order-notes .note-item:first-child {
    margin-top: 0;
}

.order-notes .note-item:last-child {
    margin-bottom: 0;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', async function() {
    try {
        const token = localStorage.getItem('token');
        if (!token) {
            showToast('Please login to view order details', 'error');
            window.location.href = '/login';
            return;
        }

        // Get order ID from URL
        const urlParams = new URLSearchParams(window.location.search);
        const orderId = urlParams.get('id');
        
        if (!orderId) {
            showToast('Invalid order ID', 'error');
            window.location.href = '/orders';
            return;
        }

        // Fetch order details
        const response = await fetch(`/user/order/${orderId}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'application/json'
            }
        });

        if (response.status === 401) {
            localStorage.removeItem('token');
            showToast('Session expired. Please login again', 'error');
            setTimeout(() => {
                window.location.href = '/login';
            }, 2000);
            return;
        }

        if (!response.ok) {
            throw new Error('Failed to fetch order details');
        }

        const orderData = await response.json();
        
        // Update order status badge
        const statusBadge = document.getElementById('orderStatusBadge');
        statusBadge.textContent = orderData.orderStatus;
        statusBadge.className = `badge bg-${getStatusColor(orderData.orderStatus)}`;

        // Show/hide cancel button based on order status
        const cancelOrderSection = document.getElementById('cancelOrderSection');
        const orderStatus = orderData.orderStatus.toLowerCase();
        
        // Only show cancel button if order is in 'processing' or 'confirmed' state
        if (orderStatus === 'processing' || orderStatus === 'confirmed') {
            cancelOrderSection.classList.remove('d-none');
        } else {
            cancelOrderSection.classList.add('d-none');
        }

        // Update order timeline
        updateOrderTimeline(orderData.orderStatus, orderData.notes);

        // Update order items
        const orderItemsContainer = document.getElementById('orderItems');
        orderData.orderItems.forEach(item => {
            const itemElement = document.createElement('div');
            itemElement.className = 'order-item';
            itemElement.innerHTML = `
                <img src="${item.images}" alt="${item.name}" class="order-item-image">
                <div class="order-item-details">
                    <h5>${item.name}</h5>
                    <p class="text-muted mb-1">Quantity: ${item.quantity}</p>
                    <p class="mb-0">Price: $${item.price.toFixed(2)}</p>
                </div>
            `;
            orderItemsContainer.appendChild(itemElement);
        });

        // Update order summary
        document.getElementById('orderId').textContent = orderData._id;
        document.getElementById('orderDate').textContent = new Date(orderData.createdAt).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        document.getElementById('paymentMethod').textContent = orderData.paymentMethod ? orderData.paymentMethod.toUpperCase() : 'COD';
        document.getElementById('subtotal').textContent = `₹${orderData.totalPrice.toFixed(2)}`;
        document.getElementById('totalPrice').textContent = `₹${orderData.totalPrice.toFixed(2)}`;

        // Update shipping details
        document.getElementById('phone').textContent = orderData.user.mobile || 'Not provided';
        document.getElementById('address').textContent = orderData.shippingInfo.address;
        document.getElementById('city').textContent = orderData.shippingInfo.city;
        document.getElementById('pincode').textContent = orderData.shippingInfo.pincode;

        // Add notes display
        const notesContainer = document.getElementById('orderNotes');
        if (orderData.notes && orderData.notes.length > 0) {
            notesContainer.innerHTML = orderData.notes
                .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
                .map(note => `
                    <div class="note-item mb-3">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="badge}">${note.status}</span>
                            <small class="text-muted">${new Date(note.timestamp).toLocaleString()}</small>
                        </div>
                        <p>${note.message}</p>
                    </div>
                `).join('');
        } else {
            notesContainer.innerHTML = '<div class="p-3 text-center text-muted">No notes available for this order.</div>';
        }

    } catch (error) {
        console.error('Error:', error);
        showToast(error.message || 'Failed to load order details', 'error');
    }
});

function getStatusColor(status) {
    const colors = {
        'Processing': 'warning',
        'Confirmed': 'info',
        'Delivered': 'success',
        'Cancelled': 'danger'
    };
    return colors[status] || 'secondary';
}

function updateOrderTimeline(currentStatus, notes = []) {
    const timeline = document.getElementById('orderTimeline');
    const statuses = ['Processing', 'Confirmed', 'Delivered'];
    let currentFound = false;
    
    timeline.innerHTML = '';

    // Handle cancelled state
    if (currentStatus === 'Cancelled') {
        const cancelNote = notes.find(note => note.status === 'Cancelled');
        timeline.innerHTML = `
            <div class="timeline-item cancelled">
                <div class="timeline-content">
                    <div class="timeline-title">Cancelled</div>
                    <div class="timeline-date">${new Date(cancelNote?.timestamp || Date.now()).toLocaleString()}</div>
                </div>
            </div>`;
        return;
    }

    // Create timeline items with actual timestamps from notes
    statuses.forEach(status => {
        const isCurrentStatus = status === currentStatus;
        const isPastStatus = !currentFound && !isCurrentStatus;
        const statusNote = notes.find(note => note.status === status);
        
        if (isCurrentStatus) {
            currentFound = true;
        }

        const timelineItem = document.createElement('div');
        timelineItem.className = `timeline-item ${status.toLowerCase()} ${
            isPastStatus ? 'completed' : 
            isCurrentStatus ? 'active' : 
            'pending'
        }`;
        
        timelineItem.innerHTML = `
            <div class="timeline-content">
                <div class="timeline-title">${status}</div>
                <div class="timeline-date">
                    ${statusNote ? 
                        new Date(statusNote.timestamp).toLocaleString() : 
                        isCurrentStatus ? 'Current' : 'Pending'}
                </div>
            </div>
        `;
        
        timeline.appendChild(timelineItem);
    });

    // Remove last timeline item's after element
    const lastItem = timeline.lastElementChild;
    if (lastItem) {
        lastItem.style.paddingBottom = '0';
        lastItem.style.height = 'auto';
    }
}

async function cancelOrder() {
    // Show the modal instead of the default confirm
    const modal = new bootstrap.Modal(document.getElementById('cancelOrderModal'));
    modal.show();
}

// Add new function to handle the actual cancellation
async function confirmCancelOrder() {
    try {
        const urlParams = new URLSearchParams(window.location.search);
        const orderId = urlParams.get('id');
        const token = localStorage.getItem('token');

        const response = await fetch(`/user/order/${orderId}/cancel`, {
            method: 'PUT',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });

        if (response.status === 401) {
            localStorage.removeItem('token');
            showToast('Session expired. Please login again', 'error');
            setTimeout(() => {
                window.location.href = '/login';
            }, 2000);
            return;
        }

        if (!response.ok) {
            throw new Error('Failed to cancel order');
        }

        // Hide the modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('cancelOrderModal'));
        modal.hide();

        showToast('Order cancelled successfully', 'success');
        setTimeout(() => {
            window.location.reload();
        }, 1500);

    } catch (error) {
        console.error('Error:', error);
        showToast(error.message || 'Failed to cancel order', 'error');
    }
}
</script>

<%- include('../partials/footer') %>